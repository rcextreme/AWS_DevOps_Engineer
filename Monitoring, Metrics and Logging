I Overview
    DevOps includes monitoring and measuring everything
    

II Introduction
   Series Overview
   What you can expect from this course
     - cloudwatch
     - monitoring with custom cloudwatch metrics
     - creating CW alarms
     - monitoring API calls with CT
     - monitoring LOG files with CW
     - Working with CW events

III  Getting Started with CloudWatch

  III.I CW Overview
    Key Components
        Monitor AWS resources with standard metrics
        Monitor with Custom Metrics
        Monitor and store logs
        Set alarms
        view graphs and statistics
        monitor and react to changes
    
    Open AWS console and connect to CW
      - View metrics for created resources
    
    You can see CW metrics also from the EC2 service
      EC2->Monitoring
    
    Discuss System Status checks vs instance status checks
    
    review EBS metrics
    
    notice metrics are only stored for 2weeks
    
    You can created your own Dashboard in CW
    
    CPU Utilization 
    Adding text widgets
    
    
   
  III.II Basic vs Detailed Monitoring
    View basic monitoring of an instance in EC2 Dashboard
      -Basic monitoring logs to CW Every 5mins
      -Detailed monitoring logs data every 1min
        -is enabled per ec2 instance
     
     Enable detailed monitoring on a instnance during launch & after created
     
     Enable detailed monitoring via CLI
       # aws ec2 monitor-instances --instance-ids <instance_id>
       # aws ec2 unmonitor-instances --instance-ids <Id>
       you can do it while launching instance
       # aws ec2 run-instances --image-id ami-09092360 Enabled=true
     
     
     Aggregating metrics.  Only available for detailed monitoring
     
     
  III.III Metrics, Namespaces and Dimensions
    Definitions
      -metric : the thing we want to monitor (i.e cpu, memory)
      -Data Points: are gathered over time for a metric
      -Namespace: these are logical groupings of metrics (i.e ec2, ebs)
        -You could have a metric called CPU Utilization in different namespaces
      -Dimension: This is a filter to sort a metric.  For exame you could display CPU IO
         for an Instance or an ImageID
      
      -Open the CloudWatch User Guide and view all the default namespaces and their dimensions
     
 
 III.IV Viewing and Searching for Metrics
   -The CW dashboard won't display metrics for services you haven't configured in that region
   -Searchin for metrics by typing a string (i.e write)
   -When you're viewing a metric you can do Actions->Add_to_dashboar or actions->share to share url to
   
   -You can figure out all the metrics CW tracks via the User Guide or via the CLI
     i.e: to list all ec2 metrics
     # aws cloudwatch list-metrics --namespace 'AWS/EC2'
     # aws cloudwatch list-metrics --namespace 'AWS/EBS'

III.V Getting Statistics for a Metric
      -CW only keeps 2weeks worth of stats for a metric.  To keep it longer you'll have to export the data
      
      -Some commands to view and export metric stats 
      # aws cloudwatch get-metric-statistics --namespace AWS/EC2 --metric-name CPUUtilization 
          --period 3600 --statistics Maximum --dimensions 'Name=InstanceId,Value=i-01a0f3d6ceef72a57'  --start-time 2017-04-10-T09:0 
          0:00 --end-time 2017-04-10-T10:00:00

     # aws cloudwatch get-metric-statistics --namespace AWS/EC2 --metric-name CPUUtilization 
          --period 3600 --statistics Average --dimensions 'Name=ImageId,Value=____'  --start-time 2017-04-10-T09:0 
          0:00 --end-time 2017-04-10-T10:00:00


     # aws cloudwatch get-metric-statistics --namespace AWS/EC2 --metric-name CPUUtilization 
          --period 3600 --statistics "Sum" --dimensions 'Name=AutoScalingGroupName,Value=___'  --start-time 2017-04-10-T09:0 
          0:00 --end-time 2017-04-10-T10:00:00
           
 
 
 
   III.VI  Summary ( Getting Started with CloudWatch )
     we did a basic CW overview
     -quick demo
     -toured cw console
     -how to work with metrics
     
     Basic monitoring vs Detailed Monitoring
      -basic monitoring is going to give you data points in 5 minute interval
      -detailed monitoring gives you data in 1 minute intervals 
        -it incurs a cost
        -you also get the ability to do aggregation of statistics in the console and the CLI. 
      
      We saw the differences between metrics, namespaces, and dimensions.
      -metrics : are the units of measurement, or variables that we monitor.
      -Namespaces : are the containers for those metrics
      -dimensions : are  filters that we can apply against those to customize the way that the data comes back. 
      
      We viewed metrics via the CloudWatch console, as well as the CLI
      
      list-metrics: we used the list-metrics command in the CLI
      
      We looked at getting statistics for a metric via the console and the cli with the get-metrics statistics command
      - Remember that we can only go back 14 days to look at the data
      - via the cli you can also export that informat. 
      
     
IV.  Monitoring with Custom CloudWatch

IV.I Intro
   Why do this?
   prepare instances?
   Creating Custom metrics In windows
   Creating Custom metrics In Linux
   

IV.II Common Use Cases for Custom Metrics
  Mem and Disk utilization is not monitored by default
  
  You can achieve this by creating custom metric data from the EC2 instances
  
  Then you need to send this data up to CW on a periodic basis
    -Create a role to allow instance write access to CW
    - Run a script via cron to send the data peridically
    
IV.III    Preparing EC2 instances for Custom Monitoring
  Create a custom policy with Granular Permission
    AWS -> IAM -> Create Policy -> Policy Generator
       Service: CloudWatch
       Actions: GetMetricStatistics,  ListMetrics,  PutMetricData
       ARN: *

       Service: EC2
       Actions: DescribeTags
       ARN: *

       Name: CWPolicy
    AWS -> IAM -> Create Role
    
    Launch an EC2 Windows Instance
      UserData: https://gist.github.com/mikepfeiffer/a4ce6d25ae092f1a4ea97afad5879530
                Install Python and AWS CLI
                Install Chocolatey
    
    Launch a Linux instance
      UserData: https://gist.github.com/mikepfeiffer/d889b3bc78b68193e407d487b197be04
            AWS sample script
           Script
  
  IV.IV  
  
  >aws cloudwatch put-metric-data --metric-name FreeMemoryGB --namespace Windows --value 5 --region us-east-1 --dimension 'Name=Server,Value=WIN'
  
  
  
IV.VI  Summary: ( Monitoring With Custom Cloudwatch Metrics)
  Use case for custom metrics
  
  No metrics by default for memory utilization or disk utilization.
  
  Preparing EC2 instances to be able to create Custom Metrics
    -IAM permissions
    -Permission to call the APIs with an IAM Role
    -set up a granular IAM policy with only the permissions we need to set custom metrics. 
    
  We moved on to using the AWS CLI on Windows to publish custom metric data
  
  Used the put-metric-data command.  Remember this for exam
  
  how to do this as well on Linux using the AWS provided Perl scripts for memory and disk utilization
  

V Creating CloudWatch Alarms

V.I     Introduction
        * Sending alarm notifications through SNS
        * How to scale out and in using CW alarms
        * How to set up notifications (billing and cost optimization)
        * How to control instance state with CW alarms
        * AWS CLI commands for CW
        
V.II    Understanding CloudWatch Alarms
        You can set an alarm based on a metric value
        You can only have up to 5000 alarms per AWS account.
        Alarms can take actions. Like send a SNS notification
        
V.III   Sending  Alarm Notifications via SNS
        Exercise: CPU Alarm on an EC2 instances
          -Launch an Ubuntu instance with Detailed Monitoring enabled.
          -From EC2 console, create an CW alarm to monitor CPU. Configure to send SNS email (create SNS topic)
          -Install stress on the instance and run it
            # sudo stress --cpu 8
          -Confirm email is received
          -View the alarm in the CW console
          -Show how this aram could've been created in CW console
            
        
V.IV    Scaling Based on CloudWatch Alarms
        
        Exercise: Create an AutoScaling Group with Alarms for Scaling Policies
            -Create a Launch configuration
                -Ubuntu
                -enabled detailed monitoring
            -Create AutoScaling group
                - 1 instance, max of 4
                - install stress
            -Connect to instance and install stress and run it
            -Select Scaling Policy and add Policy and alarm to scale by 1 based on CPU usage
            -Display the alarm in CloudWatch.
            -See the Alarm trigger the scaling policy and add an add an instance
            -Create a second scaling policy and alarm this time to remove and instance when CPU drops
            
            
            

V.V     Monitoring Estimated Account Charges
        
        Exercise: Creating a Billing alarm
            -You must be in Northern Virginia Region
            -You must be signed in as ROOT
            -Connect to CloudWatch
            -Display  billing metrics
            -Create the billing alarm.
            
        
        
V.VI    Controlling Instance State with Alarms
        
        Exercise: Create an Alarm on EC2 to restart an instance
            -Launch an instance
            -In EC2 Dashboard create an alarm
              -action= stop instance
              -whenever= cpu <= 1%
            -Display the Alaram in the CloudWatch console
        
        we can recover instances based on some kind of system failure. 
        we can do cost optimization by shutting instances down if they're not being fully utilized. 
        we can also reboot, or terminate, them depending on the metrics and the threzsholds that we configure
        
        
V.VII   AWS CLI Commands for Managing Alarms
        AWS CLI alarm commands (these are all parameter to 'aws cloudwatch' ...)
        - mon-put-metric-alarm
        - mond-describea-alarms
        - mon-disable-alarm-actions
        - mon-enable-alarm-actions
        - mon-describe-alarm-history
        - set-alarm-state
        

V.VIII  Module Summary (Creating CloudWatch Alarms)
        understanding CloudWatch from a high level
        You can have 5000 alarms configured in a single AWS account. 
        
        Two ways to create CW alarms
          1. From EC2 Console
          2. From CW console
    
        Remember that AutoScaling policies use CloudWatch Alarms
        
        Remember that you must be in the Northern Virginia US East 1 Region to be able to monitor account charges
        Remember you have to enable billing metrics if you want to see account charges
        
        we can recover instances based on some kind of system failure. 
        we can do cost optimization by shutting instances down if they're not being fully utilized. 
        we can also reboot, or terminate, them depending on the metrics and the threzsholds that we configure

        
        
VI  Monitoring API Calls with CloudTrail

VI.I Introduction

VI.II CloudTrail Overview
      Every action in the console,CLI,SDK is an API call
      
      overview: 
        You create a trail and the log files are delivered to an S3 bucket.
        The trail applies to all regions.  So all regions in your account will sent trail logs to your bucket
        You can trigger notifications based on API action
        Access to CT can be limited by IAM
      
      
      
VI.III Turning on CloudTrail
      
       Exercise: Enabling CloudTrail
         - Open CT
         - Get Started NOW to create trail
         - discuss options
         - once created click on the trail and discuss selected options
         - Go to s3 and view bucket
         - perform some API actions (create an instance, modify a Security Group, etc)
         - it'll take about 15min for logs to appear in the trail
         
         
       
       
VI.IV  Monitoring Events with CloudTrail API Activity History
       
       Exercise: Use AWS Console and the CLI to view a trail
        - Connect to Cloud Trail in the AWS console
        - Explore the table with all the trails from the API calls we made previously
           -This displays only 7 days of history
           -console will only display Create/update/delete actions
        - Display the same data via the Command line
           $ aws cloudtrail lookup-events help
           $ aws cloudtrail lookup-events --max-result 1   -> this shows the most recent change
           $ aws cloudtrail lookup-events --lookup-attributes 'Attributekey=EventName,AttributeValue=RunInstances'
       
VI.V Configuring Permissions for CloudTrail
        
       Exercise: Create a user account with access only to CLoudTrail 
         -In IAM create a group
           -Assign the CT read only access poliy
         -Create a user
           -assign a passowrd
           -add the user to our group
         -Login to IAM with user and confirm you only have access read only access to CT
       
       Study this page to set up central loggin
         https://aws.amazon.com/blogs/security/sharing-aws-cloudtrail-log-files-between-accounts/
         
         
VII Monitoring Log Files with CloudWatch

VII.I Into

VII.II Overview of CloutWatch Logs
    -What is CloudWatch Logs
     -Allows you to centrally capture Logs from EC2 instances and CloudTrail
     
    -CWL requires to install an agent on instance
    
    Terms:
      -Log Group
      -Log Stream (e.g each instance is a log stream)
      -Log Events
      -Metric Filter

VII.III Setting up the CloudWatch Logs Agent on Ubuntu Linux EC2 Instance

   Exercise: Working with CW logs  
     http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/QuickStartEC2Instance.html
     -Create a role to allow EC2 instances to forward data to CWL
       -requires these actions
         "logs:CreateLogGroup"
         "logs:CreateLogStream"
         "logs:PutLogEvents"
         "logs:DescribeLogStreams"
      -Launch Ubuntu EC2 instance
       Bootstrap:
         # apt-get update
         # apt-get install apache2
      - Create the config file for the CW agent
      - Install and configure the agent with Python script from AWS
      

VII.IV Configuring a Windows Instance for CloudWatch Logs
    - CWL is already built into the Windows EC2 Config Service
    
    Exercise: Launch Windows Instance with CWRole
      -Connect via RDP
      - Enable CWlogs running: ec2ConfigServiceSettings
      - setup CWL config file similar to Linux
      
      
    
VII.V Creating Metric Filters for Instance Logs
  - They allow you to basically search for patterns in log files, and create alarms based on that
    and get notified about issues that are happening within your log files.  
  
  Exercise:
    - Add a metric filter to our previous Logroup to notify us of a 404 error in the LogStream
    - Have metric send an SNS notification


VII.VI  Integrating CloudTrail with CloudWatch Logs

   Exercise: How to send data from CT to CWL
     -Connect to CT, select Log Group & enable to send logs to CWL
     -Go into CWL and confirm you're getting the logs from CT
     -In CT, View and run the CloudFormation template the AWS makes available to create Metrics and Alarms for CWL



VIII Working with CloudWatch Events
  
VIII.I Intro
  
VIII.II Overview of CW Events
     Amazon created this service to ease the task of performing actions based on certain events that happen
     on your instances.  This works like a CRON scheduler for AWS
     
     The process involves creating an 'Event Rule' in CE for a certain event and then specify where you want 
     to route that event to (Lambda, SNS, etc)
     
     Events 
       -EC2 instance state change
       -custom schedule
       -API call
       - Console Sign in
       -Auto Scaling
     
  
VIII.III  Automating EBS Snapshot
       Exercise: Create an CE rule to take a snapshot of EC2 instance based on a schedule
       -Create a rule 
       -select schedule
       -target: built-in, create a snapshot
    
VIII.IV Scheduling an EC2 Instance to Run only during business hours
        Exercise: Create a CE rule to shutdown an instance
        -Create rule to stop instance
        -create rule start instance. THis will require you to write a lambda function in node.js
            sample code is in Github gist
        
VIII.V Receive notification for AWS Console sing-in
        Exercise: Create a CE to track logins to AWS console
        -Must be in N.Virginia
        -Go to CloudWatch Events and create a new rule
            -Apply to any user
            -Target should be SNS
        -Test the rule by login in to console. 
        -Select 'show metrics of rules' to see logins
        
        
VIII.VI Module Summary


  


