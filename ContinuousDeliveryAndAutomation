3/10/17    4h16m

I Overview
  Prerequisites and studying
  Principles, practices and benefits
  AWS CloudFormation
  AWS ElasticBeanstalk
  Opsworks
  script tasks with the AWS CLI

II Series Introduction

II.I Getting Started
  Series Introductions
  -Continuous Delivery and Automation
  -Monitoring, Metrics and Logging
  -Security, Governance and Validation
  -HA and Elasticity

  What we'll cover
  -Continuous integration and continuous delivery
  -Application lifecycle mngmt
  -automating infrastructure with cloudformation
  -Deploying Apps with Elastic Beanstalk
  -Creating Stacks and Managing Config with Opsworks
  -Scripting and Automating Operational Tasks

II.II  Prerequisites for the Exam
   -Have an associate cert
   -Have experience with scripting and programming

II.III Exploring the Exam Blueprint
   -How to access the blueprint
   -Go over the blueprint

II.IV Tips for Studying for the Exam
  -AWS Sample questions
  -AWS Practice exam
  -Read FAQs

II.V Keeping up with updates
  - AWS official Blog
  - Follow #AWS on twitter
  - reddit


III. Integration and Continuous Delivery

  III.I Introduction
    -Pipelines to commit code to prod

  III.II Understanding the DevOps MindSet

    Understanding the DevOps Mindset
    - cultural change, paradigm shift, collaboration
    - improvement in software delivery
    - eliminating silos between devs and IT Ops
    - Dev practices applied to Infrastructure
    - Dev Ops Principles
       -work as one team
       -agility
       -automation
       -test & version code
       -infrastructure code

  III.III Continuous Integration & Continuous Deployment
  - CI stops short of pushing changes to prod while cd does push to prod
  - Automate everything.  Pipeline gets triggered by a code submit
  - Define infrastructure as code
  - Store app and infras code in version control
  - Unify the app and the infras.
  - perform end-to-end automated testing

III.IV  Infrastructure as Code
  - Repeatability: Humans make mistakes
  - Agility: Roll forward or back easily
  - Auditing & Security: paper trail and permissions

III.V  Automation and Configuration Management Tools
  - provisioning: cloudformation, opsworks, beanstalk
  - declarative vs imperative scripts: loosely coupled to implementation
  - chef, puppet, saltstack, ansible, DSC

 III.VI Summary
 - Collaboration
 - Automation
 - Versioning app and infrastructure code
 - End-to-end automated tests



IV. Understanding Appl Licecycle Mgmt

  IV.I Intro
    managing the lifecycle of an app running on AWS
    using Git
    continuous delivery pipeline with AWS and Jenkins
    bootstrapping instances
    building custom AMI
    blue-green app release pattern


  IV.II Version Control
    reference  http://docs.aws.amazon.com/powershell/latest/userguide/specifying-your-aws-credentials.html
    Set up AWS Code Commit
    -view AWS-> CodeCommit -> UserGuide -> SetUp
    -Install AWS Tools for Windows Powershell
    -Install git for windows
    -Unselect Git Cred mngr. because I'm  going to use a cred manager
     that comes with the AWS tools so I can authenticate to AWS CodeCommit
    -Create a codecommit user in your AWS account and save the credentials
       Add CodeCommit access policy to this user
    -Add credentials to powershell
      > Set-AWSCredentials -AccessKey <key_id> -SecretKey <key_value> -StoreAs codecommit
      > cd 'C:\Program Files (x86)\AWS Tools\CodeCommit'
      > .\git-credential-AWSS4.exe -p codecommit

    -Create a repo in CodeCommit
    -Clone the repo in PowerShell
       git clone https://git-codecommit.us-east-1.amazonaws.com/v1/repos/MyRepo

    -Check in a file
      > git config user.email 'raf@example.com'
      > git config user.name 'raf'
      > notepad index.html
      > git status

      > git add .\index.html
      > git status
      > git commit -m 'initil commint'
      > git push origin master
      > git log
      > git diff <commit_id>
      > get-history   <view history in powershell>
      > Invoke-History 25



  IV.III Getting started with CodeDeploy and CodePipeline
  
     Project's repo  https://github.com/mikepfeiffer/aws-codedeploy-jenkins-linux

     Create  IAM roles :
      CDInstanceRole -> service role: EC2  -> AmazonEC2RoleForCodeDeploy
      CDServiceRole -> servicerole: CodeDeploy -> AWSCodeDeployRole

   Deploy two ec2 instances
        assign the CDInstanceRole
        
        bootstrap:
        #!/bin/bash
        cd /home/ec2-user/
        aws s3 cp 's3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm' . --region us-east-1
        yum -y install codedeploy-agent.noarch.rpm

    Set up App and Deployment Group in CodeDeploy
      CodeDeploy -> Custom Deployment
          AppName: DemoApp
          DepGroupName: DemoAppInstance
          search by tags: Dev
          Deployment Config: AllAtOnce
          ServiceRole: CDServiceRole

    Setup a two stage Apps pipeline to deploy the App
        CodePipeline -> New
           name: pipeline
           SourceProvider: Github
           Connect to Github (it'll leverage single sign on if you're signed on already)
             Select Repo, Branch: master
             Build Provider: no
             Dep Provider: AWS Code Deploy
             App Name: Demo App
             Depl.Group: DemoAppInstances
             Create Service Role: AWS-CodePipeline-Service


    Deploy tw EC2 instances: T2Micro with CDInstanceRole
      Add Boostrap script



  IV.IV Build a pipeline with  a Build Stage
     This video implements this tutorial:  
                 http://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-four-stage-pipeline.html

    Continuous Integration products
    -Bamboo from Atlassian
    -TeamCity from JetBrains
    -Travis CI
    -CruiseControl
    -Jenkins, CodePipeline integrates nicely with this product

    CI servers vs Build Tools

    In this section we'll
    -Run Jenkins on EC2
    -Create a new code pipeline with build and test stages

    New Project we'll use: AWS CodeDeploy Jenkins Linux
    -Rake will generate the index.html file

    Go back into CodePipeline and delete the previous PL

    From Mike's Github account, Download the CloudFormation template to install Jenkins on an EC2 instance
   
    Build the Jenkis server using the provided CloudFormation template
      AWS -> CloudFormation
      -stack name: jenkins
      -instance type: t2.micro
      -KeyName:
      -VPC ID:
      -VPC subnet
      -Your IP Range: 0.0.0.0/0
      - DON'T TAG
      
      Once build complete, Connect to URL of Jenkins server and configure it
        -Get password from server: cat /var/lib/jenkins/secrets/initialAdminPassword
        -Manage Jenkins -> Configure Global Security -> Enable Security
        - Jenkins own user database, Allow users to sign up
        - Manage pluggins -> 
          -Install : AWS CodePipeline
          -restart jenkins app server
        - Dashboard -> Manage Jenkins -> Configure System -> Global Properties -> Environment Variables
          -Add Env variables so Jenkins can find the Rake utility
             name: PATH
             Value: $PATH:/usr/local/bin
       
      - Create a new project in Jenkins 
            Jenkins -> Dashboard -> New Item -> 
            Name: Build Project
            Freestyle project ->  oK
            
            Execute Concurrent builds if necessary
            Source Code Mngt: AWS CodePipeline
            Region:
            Category: build
            Provider: Jenkins  (this must match the provider you'll create in the Pipeline)
            Build Triggers:  Poll SCM
            Schedule: * * * * *
            Build:  
              Execute Shell: Command = rake
              Post-Buil Actions: AWS CodePipeline Publisher
                 Output Locations -> Add   (leave blank for codedeploy to place in s3)
         
        - Connect to AWS CodePipeline & Create New PL
           Name: JenkinsPL
           
           Source
               Source Provider: GitHub
               Repository: GitHub -> Connect
                 select repo
                 mstr branch
               output artifact: MyApp
           
           Build            
               Build Provider: Add Jenkins
                -Proivder name     <this must match that in the Jenkins project)
                - Server URL: <servers IP>                
                - Project name: BuildProject   <this is the jenkin's project name>
               Input Artifact: MyApp
               Ouput Artifact: MyAppBuild
           
           Deployment
             Action Category: Deploy
             Deplymt Provider: AWS CodeDeploy
             App Name: DemoApp    (This is the CodeDeploy App name)
             Dep Group: DemoAppinstances   ( This is the App Instance name of the CodeDeploy App)
             Role name: AWS-CodePipeline-Service (created previously)
             Input artifact: MyAppBuild
           
           CreatePL

  

  IV.V Adding a Test Stage to the Pipeline
    - See the project in Github and notice the Rake file includes a test section that calls a Ruby script
    
    - Add a new project in Jenkins for the test stage
        Name: TestProject    Freestyle project
        Execute concurrent builds if necessary
        Source Code Mngt: AWS CodePipeline
        Category: Test
        Provider: Jenkins (same as previou s project)
        Build triggers: Poll SCM     * * * * *
        Build: Execute Shell
           Command:  TEST_IP_ADDRESS=<IP_OF_Instance> rake test
        Post-buil Actions:  AWS CodePipeline Publisher
              don't add an action. this is just to signal to codepipeline when it's done
        
    - Add a test stage to the Codepipeline
        Name: test
        Action Categorty: Test
        Anction Name: JenkinsTest
        Test provider: Jenkis
        ProjectName: TestProject
        Input artifacts:
           MyAppBuild
    
    - Save changes
       
      
     
  IV.VI Bootstrapping and Building Images
  
      -You want your instances to come online quickly during deployments.
      
      -Bare OS image vs an Image with everything baked into it
      
      -partially configured AMI is best of both worlds
      
      -How to create an AMI of a running instance
      
      -How to launch an instance from personal AMI
      
      - Netflix's animator let's you create an AMI on a volume directly, without needing a running instance
            https://github.com/taruntmr/aminator   open source
      
  

  
  IV.V Blue-green deployments
     -Diagram of an blue-green deployment using RT53 and ELB
        Use weighted routing
        Canary analysis
     -DNS record TTL. should be low
     -Elastic Beanstalk and Opsworks have features for Blue/Green deployments
     
     
     
     
     
  V  Automating Infrastructure with CloudFormation
     Download the official user guide for reference: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-ug.pdf
   
  V.I Introduction
      We'll learn how to create CF templates using JSON
      
      
  V.II CloudFormation Key Concepts
      JSON - CF templates are written in JSON
      Resource Relationships - You don't need to worry about dependencies
      Feedback -
         CF will give you detailed status of a build
         CF will roll back the entire deployment if for some reason one of the resources fails to get created
      Reusable - Templates are reusable
      Interactive - You can define your templates to be interactive if you like
      Automated
           
  
  V.III Understanding JSON
      Json has become more popular than XML
       The official JSON doc site:  http://www.json.org/

       You can find a JSON editor and a formatter by doing a google search
          www.cleancss.com/json-editor
          jsonformatter.curiousconcept.com
          
       JSON is made up of key-value pairs
       Example of a JSON doc
         {
            "name": "Michele",
            "shirt_color": "blue",
            "laptops": [
                {
                    "brand": "Lenovo",
                    "operating_system": "Ubuntu"
                },
                {
                    "brand": "Apple",
                    "operating_system": "OSX"
                }
            ],
            "has_a_dog": false,
            "items_on_desk": ["mug", "pen", "monitor"]
          }
          
          
          
  V.IV  Creating a Basic Template
        You can use a text editor to create your template.
        Or you can use an IDE like Eclipse for MAC.  You'll want to install the 
           AWS Tookit for Eclipse to give you intelisense.
        
        To get started: https://aws.amazon.com/cloudformation/details/
        
        Open Aws -> cloudformation -> Design Template
          or
        http://jsoneditoronline.org
        
        Create a template to build a single EC2 instance and a Sec Group.  
           See it here: https://github.com/rcextreme/AWS_DevOps_Engineer/blob/master/Cloud_Form_%232_EC2wSecGrp
        
        Login to AWS and Launch a stack with this template
        
        
        
        
  V.V   Adding Parameters, Mappings and Outputs
          In this section we'll update our template to use Parameters and Mapping
          
          You add parameters to the template to avoid writing sensitive data such as passwords.
          It's pretty cool because this will cause a Form to Appear in CFormation where you can enter the value.
          
          Also you can add mappings as way to obtain values that depend on various things.  Mappings are sort of hash.
          
          We Added the following parameters to the template
             -KeyName
             -InstanceType
             -SSHLocation
          
          Also add a mapping function to determine the image ID.  We added two maps
             -AWSInstanceType2Arch
             -AWSRegionArch2AMI
          
          The new template can be found here: 
                https://github.com/rcextreme/AWS_DevOps_Engineer/blob/master/Cloud_Form_Templ_%233_MapsNOutputs
                
             
V.VI  Bootstrapping Applications (update a stack)
        This section shows how to perform Bootstrap actions using a resources Metadata in  Conjunction with User data.
        This leverages AWS::CloudFormation::Init  and cfn-hup.    cfn-hup runs as a daemon and it can sense when metadata has been 
        changed and it will automatically update the stack.
        
        To update a stack you make the required changees to the template. Then in the CF GUI you select the stack, select modify
        and upload the new template
        
        
        The template is found here:
          https://github.com/rcextreme/AWS_DevOps_Engineer/blob/master/Cloud_Form_Templ_%234_CreationPolicy
          
          
  
V.VII Waiting on Instances
      This section focuses on how to notify cloudformation that the Bootstratp tasks on the stack have completed.
      There are two ways to do this.  Using
         -WaitCondition    this is the old way
         -CreationPolicy with Timeout    this is the newer way


V.VIII   DependsOn and Conditional Resources
     
     DependsOn - You use Depends resource when you have dependecies, say an EC2 instance depends on a DB
     Conditions - These are conditions or tests you can write in your template to take action if an action.
     
     You can use the example in the cfn user guide.  It creates a CreateProdResources condition.  Then the MountPoint resource
     will be createed in the conditions is met, ie the EnvType parameter was set to prod.
     
         ....
         ....

         "Parameters" : {
         "EnvType" : {
         "Description" : "Environment type.",
         "Default" : "test",
         "Type" : "String",
         "AllowedValues" : ["prod", "test"],
         "ConstraintDescription" : "must specify prod or test."
         }
         },

         "Conditions" : {
         "CreateProdResources" : {"Fn::Equals" : [{"Ref" : "EnvType"}, "prod"]}
         },

         "Resources" : {
         "EC2Instance" : {
        API Version 2010-05-15
        146
        AWS CloudFormation User Guide
        Conditions
         "Type" : "AWS::EC2::Instance",
         "Properties" : {
         "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]}
         }
         },

         "MountPoint" : {
         "Type" : "AWS::EC2::VolumeAttachment",
         "Condition" : "CreateProdResources",
         "Properties" : {
         "InstanceId" : { "Ref" : "EC2Instance" },
         "VolumeId" : { "Ref" : "NewVolume" },
         "Device" : "/dev/sdh"
         }
         },

         ...
         ...
     

V.IX  Troubleshooting Failed Stacks
      
      Typically CF destroys all resources if there's an error
      To troubleshoot disable 'Rollback on failure' from the Advanced section.
      
      Then read logs in /var/log (linux)
 
 
 
 V.X  Creating Nested Templates
       When you're building large deployments the best practice is to break up your Templates intead of having a huge one.
       Then you create a master template from which you call the smaller templates
       
       Use the AWS::CloudFormation::Stack  resource to achieve this as described in the CFN User Guide.
       The video does not build out a template 
       
       An example from the course on how it's used
       https://github.com/rcextreme/AWS_DevOps_Engineer/tree/master
       
       I found this example:
       https://github.com/wjordan/aws-codepipeline-nested-stack
  
  
      
