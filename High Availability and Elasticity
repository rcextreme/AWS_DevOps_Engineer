
I.   Architecting for HA and Scalability

     Intro
     ------
     discuss sections in this module
     
     
     Understanding Elasticity and Scalability
     ------------------------------------------

      Lecture: 
        - Explain why in the past architects would overprovision their Apps from day one
        
        - Today with cloud you can scale elastically. Show diagram with ELB and ASG
        
        - Explain that Elastic scaling requires stateless Apps
            stores no session information
            user session info typically stored in a DB or DynamoDB table
            easily scales horizontally
        
        -  Session Affinity - You may be able to mitigate session state issues with stateful applications and horizontal scaling 
           by implementing something called session affinity, and what this means is that once a user is connected 
           to a server, they stay connected to that server until their session is complete. 
           But the main limitation with this is that when the architecture scales, 
           existing users won't be able to make use of new compute nodes that are launched to support the application.
           
         
         - How to Scale Vertically
           1. stop instance
           2. setting -> change instance type
         
         - Limitation to Scale Vertically
           - only on EBS backed root vols
           - Virtualization type of new instance must match (HVM or PV)
     
     
     
     Implementing Disposable Resources
     ------------------------------------
     Lecture:
     
       Describe immutable infrastructure. You can destroy and redploy servers instead of logging in and fixingg
     
       Benefits of Immutable Infrastructures
        - Eliminate configuration drift
        - Reduce failures and errors on servers built with a repeatable way
            golden AMIs
            bootstrapping scripts
        - Stabilize CI/CD
     
     
     
     Loosely Coupled Architectures
     ------------------------------
    
     Loose coupling encompasses the idea of micro-services.  Where each service stands on its own
     and interacts via standard interfaces such as HTTP verbs
     

     Methods to achieve loose-coupling
       - Using Route53 with a CNAME record for an LB.  This way users are un-aware if LB is 
         updated or servers added   
       - Using queues from SQS.  A front-end system loads tasks in SQS. A back-end system
         reads queue and processes tasks.
     
     
     
     
     Architecting with Services Instead of Servers
     ------------------------------------------------
     ways to achieve this:
     
       - When developing an application try to use pre-built AWS services: SQS,DBs, S3, SNS, etc
         This might save you money and time
     
       - Static Websites server up via CloudFront and S3
     
       -  Use Servervless Architectures with Lambda functions
     
     
     
     Eliminating Single Pts of Failue
     ------------------------------------
     
     -Show a VPC diagram with dual private and public subnets
      Use NAT GW on each public zone
     
     -Deploy your Web,App & DB server in the public subnet
     
     -Use AutoScaling for your Web and App servers
     
     -Use Multi-AZ for yoru DB
     
     
     
     
     Summary
     ------------
     
     


II.  Understanding Auto Scaling

      Intro
      ------
      
      
      Creating an ELB
      ------------------
      
      Exercise: Creating ELB + ASG + RT53 + Certificate
       - Create a RT53 Zone with a real Domain
       - Create a certificate in Certificate Mngr
       - Create a Classic LB in EC2
          - Listen on port 443 and forward to Port 80.  
          - Add certificate this way you'll offload encrypting of traffic from servers to ELB
      - Add a record set for the ELB into the RT53 zone
      
      
      
      Setting up a Launch Config and Auto Scaling Group
      ------------------------------------------------
      
      Exercise: 
       - Create a custom policy to grant ability to 'Create Tags'
       - Create a Role and assign this policy
       - Create the Launch Config in EC2 with detailed monitoring
       - Grab Mike's Gist to 'set up a basic web page' & add it to bootstratp
            https://gist.github.com/mikepfeiffer
       - Create ASG
       - Open web page served by the instances once the're up
       - To see the commands to do all these steps manually view gist called
          "Example to Create AWS ELB, Launch Config, and Auto Scaling Group"
      
      
      
      Automatically Replacing Failed Instances
      ------------------------------------------
      
      Exercise:
       - Change Health Check type in ASG to 'ELB'
       - Install GitHub for windows on your system to have SSH
       - SSH into one of the instances and stop httpd
       - Watch new instance come online
       

      
      Scaling Dynamically or on a Schedule
      ------------------------------------

     Exercise:
      - Add a "on demand" scaling policy to your ASG 
        - Add alarm if NetworkIn greater than ??? bytes
        - Do a Simple Scaling policy instead of a Step policy
        - Load "Artillery" on an instance to generate the traffic
           # artillery quick --duration 1200 --rate 20 https://www.aws.labs.info
        - watch the traffic in CloudWatch Metrics.  See instance launch
        - remember the performance for the alarm is the aggregate of all instances
      
      -  Schedule based Scaling Policy
         - Select 'Scheduled Actions tab' for the ASG
         - specify the time for the action
         
      
      
      Launching Spot Instnaces in Auto Scaling Groups
      ------------------------------------------------
      
      Process to Set ASG with Spot instance
      1. Create a Launch Config specifying Spot
      2. Set a bid price
      3. Associate LaunchC with ASG
      4. Understand spot market price vs bid price
      
      
      Exercise:
       1. Create a new Launch Config
       2. Select t1.ami cause t2.micro is not available as a Spot
       3. add bid price
       
       
      
      Implementng Lifecycle Hooks
      ------------------------------
      http://docs.aws.amazon.com/autoscaling/latest/userguide/AutoScalingGroupLifecycle.html
      
      You can add a Lifecycle Hook to an ASG to perform custom actions when 
      an instance is being launched or being terminated. The hook will pause the lifecycle for an hour
      or until you send a complete signal.
      
      
      
      Creating Self Healing AUto Scaling Groups
      ------------------------------------------
      
      Create an Austo Scaling Group with a min and a max of 1 instance.
      So if the instance status were to fail ASG will relaunch it immediately.
      
      
      Module Summary
      ------------------
      
      

III. Implementing Scalable and HA Databases

      Intro
      ------
      
      
      Overview of Amazon RDS
      ------------------------
      
      Features of RDS
      
       - Fully Managed
          -Spins up EC2 instances on your behalv.  But you won't see them in console
          -Autmated Backups & Patching
          -Offers Multi-AZ with Synchronous replication
          -Automatic Failover.  DB has a single end point name.  So no need to update client
       
      DB Engines
        -Aurora
          -5times throughput of MySQL
          -up to 15 Read Replicas with less than 10ms lag
          -up to 64TB of Auto Scaling storage replicated over multiple AZs
          - which regios support Aurora.
          
        -MySQL
          -up to 6TB in size
          -up to 32vCPUs and 244 GiB Memory
        
        -MariaDB
          -A MySQL compatible DB with strong open source support
          -Details...
        
        -PostgreSQL
          -An Oracle open-source DB
        
        -Oracle (Oracle EE, Oracle SE, Oracle SE One, Oracle SE Two)
        
        -Microsoft SQL Server
          Uses SQl Database Mirroing to accomplish replication
          
          
       
      
      Setting up Amazon RDS Muti-AZ Deployments
      ------------------------------------------
      
      Exercise: Deploy a MultiAz RDS DB
        - Engine: SQL
        - Display features of the created DB in the console
          - show master/slave inst
          - show end point
        -Reboot the primary instance to show failover
      
      
      
      Vertical and Horizontal Scale with RDS
      ------------------------------------------
      
      
      Building your own DB servers on EC2
      ------------------------------------
      
      
      
      Getting Started with DynamoDB
      ------------------------------
      
      
      DynamoDB provisioned Throughput
      ------------------------------------
      
      
      Secondary Indexes in DynamoDB
      ------------------------------
      
      
      
      Creating DynamoDB Tables
      ------------------------
      
      
      Module Summary
      ------------------
      
      

IV.   Deploying a Highly Available and Elastic Architecture

      Introduction
      ------------
      
      
      What we're going to build
      ------------------------------
      
      
      Setting up a VPC
      ------------------
      
      
      Creating a DB Tier for the App
      ------------------------------------
      
      
      Defining the Launch Config
      ------------------------------
      
      
      Setting up a Load Balancer and Auto Scaling Group
      ------------------------------------------------------
      
      
      Validating the Deployment
      ------------------------------
      
      
      Module Summary
      ------------------
      
      
